- What's the difference between append() and extend()?
  - append() adds objects to the end of a list.  If you append a list to a list, you get:
      x = [1, 2, 3]
      x.append([4, 5])
      # creates: [1, 2, 3, [4, 5]]
  - extend() appends elements from inside the iterable:
      x = [1, 2, 3]
      x.append([4, 5])
      # creates: [1, 2, 3, 4, 5]
      
- Slices
  - list[start:end]   # items start through end-1
  - list[start:]      # items start through the rest of the list
  - list[:end]        # items from the beginning through end-1
  - list[:]           # a copy of the whole list
  - list[-1]          # last item in the array
  - list[-2:]         # last two items in the array
  - list[:-2]         # everything except the last two items
  
- List Comprehensions
  - [(expression with 'x') for x in sequence]
    - Example:
        squares = [ x**2 for x in range(10)]    # returns [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
        
- map()
  - Takes another function as the first argument and a collection as the second argument.
  - Returns the result of running the function on every item in the collection.
    - Example:
        map(len, ["A", "BB", "CCC"])  # returns [1, 2, 3]
  - To run a map over a function that doesn't exist, use lambda:
    - Example:
        map(lambda x: x * x, [0, 1, 2, 3, 4])   # returns [0, 1, 4, 9, 16]
        
- filter()
  - Takes a function that returns a boolean as the first argument, and a collection as the second argument.
  - Returns the result of running the function on every item in the collection, if it returned "True".
    - Example:
        squares = map(lambda x: x**2, range(10))
        filter(lambda x: x > 5 and x < 50, squares)   # returns [9, 16, 25, 36, 49]
        
- reduce()
  - Takes a function as the first argument and a collection as the second argument.
  - Returns a value that is created by combining the items.
    Example:
        reduce(lambda a, x: a + x, [0, 1, 2, 3, 4])   # returns 10
